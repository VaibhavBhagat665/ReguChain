"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./lib/api.js":
/*!********************!*\
  !*** ./lib/api.js ***!
  \********************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addWalletMonitoring: function() { return /* binding */ addWalletMonitoring; },\n/* harmony export */   analyzeWallet: function() { return /* binding */ analyzeWallet; },\n/* harmony export */   chatAPI: function() { return /* binding */ chatAPI; },\n/* harmony export */   checkHealth: function() { return /* binding */ checkHealth; },\n/* harmony export */   connectWalletRealtime: function() { return /* binding */ connectWalletRealtime; },\n/* harmony export */   fetchRealtimeNews: function() { return /* binding */ fetchRealtimeNews; },\n/* harmony export */   getAlerts: function() { return /* binding */ getAlerts; },\n/* harmony export */   getRagStatus: function() { return /* binding */ getRagStatus; },\n/* harmony export */   getRegulatoryNews: function() { return /* binding */ getRegulatoryNews; },\n/* harmony export */   getStatus: function() { return /* binding */ getStatus; },\n/* harmony export */   getStreamRecords: function() { return /* binding */ getStreamRecords; },\n/* harmony export */   getTopHeadlines: function() { return /* binding */ getTopHeadlines; },\n/* harmony export */   getWalletCompliance: function() { return /* binding */ getWalletCompliance; },\n/* harmony export */   getWalletRealtimeStatus: function() { return /* binding */ getWalletRealtimeStatus; },\n/* harmony export */   getWalletReport: function() { return /* binding */ getWalletReport; },\n/* harmony export */   listTrackedWallets: function() { return /* binding */ listTrackedWallets; },\n/* harmony export */   queryAPI: function() { return /* binding */ queryAPI; },\n/* harmony export */   refreshData: function() { return /* binding */ refreshData; },\n/* harmony export */   startRealtime: function() { return /* binding */ startRealtime; },\n/* harmony export */   stopRealtime: function() { return /* binding */ stopRealtime; },\n/* harmony export */   uploadPdf: function() { return /* binding */ uploadPdf; }\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios */ \"(app-pages-browser)/./node_modules/axios/lib/axios.js\");\n\n// Normalize NEXT_PUBLIC_API_URL to always be the backend root (no trailing slash)\nconst raw = \"http://localhost:8000\" || 0;\nconst stripTrailingSlash = (u)=>u.replace(/\\/$/, \"\");\n// If env already includes \"/api\" at the end, treat that as base root\nconst API_ROOT = stripTrailingSlash(raw.endsWith(\"/api\") ? raw.slice(0, -4) : raw);\n// Create axios instance pointed to backend root; endpoints will prefix with /api\nconst api = axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].create({\n    baseURL: API_ROOT,\n    headers: {\n        \"Content-Type\": \"application/json\"\n    }\n});\n// API functions - Updated for new backend endpoints\nconst queryAPI = async function(question) {\n    let target = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null, conversationId = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;\n    try {\n        var _data_risk_assessment;\n        // Use the proper agent chat endpoint\n        const payload = {\n            message: question,\n            conversation_id: conversationId || \"default\",\n            wallet_address: target,\n            context: {}\n        };\n        const response = await api.post(\"/api/agent/chat\", payload);\n        // Transform response to match expected format\n        const data = response.data;\n        // Get evidence from context documents if available\n        const evidence = [];\n        const news = [];\n        // Extract evidence from the response metadata if available\n        if (data.context_documents) {\n            data.context_documents.forEach((doc)=>{\n                const evidenceItem = {\n                    source: doc.source || \"Unknown\",\n                    snippet: doc.content || doc.text || \"\",\n                    link: doc.link || \"\",\n                    timestamp: doc.timestamp || \"\",\n                    title: doc.title || \"\",\n                    similarity: doc.similarity || 1.0\n                };\n                if (doc.source && doc.source.includes(\"NEWS\")) {\n                    news.push({\n                        title: doc.title || \"News Update\",\n                        url: doc.link || \"\",\n                        timestamp: doc.timestamp || \"\",\n                        source: doc.source || \"\"\n                    });\n                }\n                evidence.push(evidenceItem);\n            });\n        }\n        return {\n            answer: data.message,\n            risk_score: ((_data_risk_assessment = data.risk_assessment) === null || _data_risk_assessment === void 0 ? void 0 : _data_risk_assessment.score) || 0,\n            evidence: evidence,\n            alerts: [],\n            news: news,\n            conversation_id: data.conversation_id,\n            confidence: data.confidence,\n            suggested_actions: data.suggested_actions || [],\n            follow_up_questions: data.follow_up_questions || [],\n            risk_assessment: data.risk_assessment,\n            blockchain_data: data.blockchain_data,\n            capabilities_used: data.capabilities_used || []\n        };\n    } catch (error) {\n        console.error(\"Query API error:\", error);\n        throw error;\n    }\n};\n// Legacy chat endpoint for compatibility\nconst chatAPI = async function(question) {\n    let target = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null, conversationId = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;\n    try {\n        const payload = {\n            message: question\n        };\n        if (conversationId) payload.conversation_id = conversationId;\n        if (target) payload.wallet_address = target;\n        const response = await api.post(\"/api/agent/chat\", payload);\n        return response.data;\n    } catch (error) {\n        console.error(\"Chat API error:\", error);\n        throw error;\n    }\n};\nconst getStatus = async ()=>{\n    try {\n        const response = await api.get(\"/api/status\");\n        return response.data;\n    } catch (error) {\n        console.error(\"Status API error:\", error);\n        throw error;\n    }\n};\n// simulateIngestion removed: system uses real data only\nconst checkHealth = async ()=>{\n    try {\n        const response = await api.get(\"/api/health\");\n        return response.data;\n    } catch (error) {\n        console.error(\"Health check error:\", error);\n        return {\n            status: \"error\",\n            services: {}\n        };\n    }\n};\n// Get recent alerts\nconst getAlerts = async function() {\n    let limit = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 10;\n    try {\n        const response = await api.get(\"/api/alerts?limit=\".concat(limit));\n        return response.data;\n    } catch (error) {\n        console.error(\"Get alerts error:\", error);\n        throw error;\n    }\n};\n// Add wallet to monitoring\nconst addWalletMonitoring = async (walletAddress)=>{\n    try {\n        const response = await api.post(\"/api/wallet/monitor\", {\n            wallet_address: walletAddress\n        });\n        return response.data;\n    } catch (error) {\n        console.error(\"Add wallet monitoring error:\", error);\n        throw error;\n    }\n};\n// Analyze wallet\nconst analyzeWallet = async (walletAddress)=>{\n    try {\n        const response = await api.post(\"/api/wallet/analyze\", {\n            address: walletAddress\n        });\n        return response.data;\n    } catch (error) {\n        console.error(\"Analyze wallet error:\", error);\n        throw error;\n    }\n};\n// Get RAG system status\nconst getRagStatus = async ()=>{\n    try {\n        const response = await api.get(\"/api/rag/status\");\n        return response.data;\n    } catch (error) {\n        console.error(\"Get RAG status error:\", error);\n        throw error;\n    }\n};\nconst refreshData = async ()=>{\n    try {\n        const response = await api.post(\"/api/ingest/refresh\");\n        return response.data;\n    } catch (error) {\n        console.error(\"Refresh API error:\", error);\n        throw error;\n    }\n};\n// Realtime controls\nconst startRealtime = async ()=>{\n    try {\n        const res = await api.post(\"/api/realtime/start\");\n        return res.data;\n    } catch (e) {\n        console.error(\"Start realtime error:\", e);\n        throw e;\n    }\n};\nconst stopRealtime = async ()=>{\n    try {\n        const res = await api.post(\"/api/realtime/stop\");\n        return res.data;\n    } catch (e) {\n        console.error(\"Stop realtime error:\", e);\n        throw e;\n    }\n};\n// Wallet realtime helpers\nconst connectWalletRealtime = async (walletAddress)=>{\n    try {\n        const res = await api.post(\"/api/realtime/wallet/connect\", null, {\n            params: {\n                wallet_address: walletAddress\n            }\n        });\n        return res.data;\n    } catch (e) {\n        console.error(\"Connect wallet realtime error:\", e);\n        throw e;\n    }\n};\nconst getWalletRealtimeStatus = async (walletAddress)=>{\n    try {\n        const res = await api.get(\"/api/realtime/wallet/\".concat(walletAddress, \"/status\"));\n        return res.data;\n    } catch (e) {\n        console.error(\"Get wallet realtime status error:\", e);\n        throw e;\n    }\n};\nconst getWalletCompliance = async (walletAddress)=>{\n    try {\n        const res = await api.get(\"/api/realtime/wallet/\".concat(walletAddress, \"/compliance\"));\n        return res.data;\n    } catch (e) {\n        console.error(\"Get wallet compliance error:\", e);\n        throw e;\n    }\n};\nconst getWalletReport = async (walletAddress)=>{\n    try {\n        const res = await api.get(\"/api/realtime/wallet/\".concat(walletAddress, \"/report\"));\n        return res.data;\n    } catch (e) {\n        console.error(\"Get wallet report error:\", e);\n        throw e;\n    }\n};\nconst listTrackedWallets = async ()=>{\n    try {\n        const res = await api.get(\"/api/realtime/wallet/tracked\");\n        return res.data;\n    } catch (e) {\n        console.error(\"List tracked wallets error:\", e);\n        throw e;\n    }\n};\nconst getStreamRecords = async function(streamName) {\n    let { limit = 10, walletAddress = null } = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    try {\n        const params = {\n            limit\n        };\n        if (walletAddress) params.wallet_address = walletAddress;\n        const res = await api.get(\"/api/realtime/streams/\".concat(streamName), {\n            params\n        });\n        return res.data;\n    } catch (e) {\n        console.error(\"Get stream records error:\", e);\n        throw e;\n    }\n};\n// News and status helpers - Updated to use new endpoints\nconst fetchRealtimeNews = async function() {\n    let query = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : \"cryptocurrency OR blockchain OR regulatory\", pageSize = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 20;\n    try {\n        // Use the status endpoint to get recent news documents\n        const res = await api.get(\"/api/status\");\n        const lastUpdates = res.data.last_updates || [];\n        // Filter for news items\n        const newsItems = lastUpdates.filter((item)=>{\n            var _item_source, _item_source1, _item_source2;\n            return item.type === \"regulatory_news\" || ((_item_source = item.source) === null || _item_source === void 0 ? void 0 : _item_source.includes(\"Reuters\")) || ((_item_source1 = item.source) === null || _item_source1 === void 0 ? void 0 : _item_source1.includes(\"Bloomberg\")) || ((_item_source2 = item.source) === null || _item_source2 === void 0 ? void 0 : _item_source2.includes(\"Commission\"));\n        }).map((item)=>({\n                id: item.id,\n                title: item.title,\n                source: item.source,\n                published_at: item.timestamp,\n                description: item.title,\n                url: item.link,\n                verification_url: item.link\n            }));\n        return {\n            count: newsItems.length,\n            articles: newsItems\n        };\n    } catch (e) {\n        console.error(\"Fetch realtime news error:\", e);\n        throw e;\n    }\n};\nconst getTopHeadlines = async function() {\n    let category = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : \"business\", country = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"us\", pageSize = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 20;\n    try {\n        // Fallback to status endpoint for headlines\n        const res = await api.get(\"/api/status\");\n        const lastUpdates = res.data.last_updates || [];\n        const headlines = lastUpdates.filter((item)=>item.source.includes(\"RSS\") || item.type === \"regulatory_update\").map((item)=>({\n                id: item.id,\n                title: item.title,\n                source: item.source,\n                published_at: item.timestamp,\n                description: item.title,\n                url: item.link\n            }));\n        return {\n            count: headlines.length,\n            headlines: headlines\n        };\n    } catch (e) {\n        console.error(\"Get top headlines error:\", e);\n        throw e;\n    }\n};\nconst getRegulatoryNews = async ()=>{\n    try {\n        const res = await api.get(\"/api/status\");\n        const lastUpdates = res.data.last_updates || [];\n        const articles = lastUpdates.filter((item)=>item.risk_level === \"high\" || item.risk_level === \"critical\").map((item)=>({\n                id: item.id,\n                title: item.title,\n                source: item.source,\n                published_at: item.timestamp,\n                description: item.title,\n                url: item.link\n            }));\n        return {\n            count: articles.length,\n            articles: articles\n        };\n    } catch (e) {\n        console.error(\"Get regulatory news error:\", e);\n        throw e;\n    }\n};\n// PDF upload helper\nconst uploadPdf = async (file)=>{\n    try {\n        const formData = new FormData();\n        formData.append(\"file\", file);\n        const res = await api.post(\"/api/ingest/pdf\", formData, {\n            headers: {\n                \"Content-Type\": \"multipart/form-data\"\n            }\n        });\n        return res.data; // { message, title, chunks }\n    } catch (e) {\n        console.error(\"Upload PDF error:\", e);\n        throw e;\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/api.js\n"));

/***/ })

});